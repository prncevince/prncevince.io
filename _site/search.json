[
  {
    "objectID": "posts/geo/natural-disasters-maxar-open-data/index.html",
    "href": "posts/geo/natural-disasters-maxar-open-data/index.html",
    "title": "Visualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program",
    "section": "",
    "text": "A split web map of Tafeghaghte, Morocco, displaying pre & post event satellite imagery from Maxar’s Open Data Program.\n\n\nFigure 1: The village of Tafeghaghte was reduced to utter ruin after the Earthquakes that struck Morocco in the late evening of September 8th, 2023."
  },
  {
    "objectID": "posts/geo/natural-disasters-maxar-open-data/index.html#tldr",
    "href": "posts/geo/natural-disasters-maxar-open-data/index.html#tldr",
    "title": "Visualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program",
    "section": "TLDR",
    "text": "TLDR\nI use some open source geospatial tools to tile satellite imagery on-the-fly from Maxar’s Open Data Program (ODP). In particular, I use the recent devastating earthquake in Morocco as an example. Figure 10 displays a demo of this. You can use Figure 9 to play around with the web map for yourself."
  },
  {
    "objectID": "posts/geo/natural-disasters-maxar-open-data/index.html#intro",
    "href": "posts/geo/natural-disasters-maxar-open-data/index.html#intro",
    "title": "Visualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program",
    "section": "Intro",
    "text": "Intro\nThe title is a mouthful, so let’s backup a bit. Being able to create a layer in a web map from new satellite imagery can be beneficial for many reasons. When a natural disaster strikes, collecting this imagery, distributing it, and getting it in front of trained mapping volunteers’ eyes is a critical part of the chain of events for providing up-to-date information for first responders’ efforts on the ground. The Humanitarian OpenStreetMap Team (HOT), is a global non-for-profit organization who is a prime example of connecting & integrating these various efforts into disaster response.\n\n\n\n\n\n\nNote\n\n\n\nHADR (Humanitarian Assistance & Disaster Response/Relief) is a common acronym used by government entities. And it’s continuing to be explored how breakthroughs in AI can be applied to HADR efforts (e.g. https://hadr.ai).\n\n\nTools like Google Maps and Apple Maps are something that many of us use everyday for directions & navigation. How do they work though? They load what are called map tiles directly to your computer/phone to be displayed in the web map application. The tile data can be broken down into 2 categories, vector and raster. Vector tiles contain geometry and metadata information, like roads, building outlines, and locations. They can be loaded dynamically & efficiently by mapping libraries that ingest the Mapbox vector tile specification. Raster tiles on the other hand are images. And further more web browsers & apps need the images to be stored in a special encoding to be able to render them on the web map, e.g. jpeg, png, or webp format.\nCombinations of raster tiles on a web map can be thought of as a layer. Additionally, specific types of vector tile data can be split into layers as well. Figure 2 shows the different layers that can be selected from within Google Maps. The “Traffic” layer is a vector layer, whereas the “Satellite” layer is a raster layer made up of mosaiced satellite imagery.\n\n\n\nFigure 2: Layers as displayed in Google Maps\n\n\nThe methods used to create and serve raster tiles to a web map can be broken down into static and dynamic tiling techniques. The reason why providers like Google, Apple, and Bing can stream these map layers so quickly to us is that they use a static tiling technique that uses prerendered images stored on their servers. The images at each level of the slippy map are combinations of several optical imagery resolutions from multiple commercial & government satellite providers, which is why you can see the attribution level in the bottom of the map change as you zoom to different levels and pan over different areas of the Earth. Figure 3 displays an example of this.\n\n\n\nFigure 3: Attribution of the Satellite layer as displayed in Google Maps\n\n\nEarth observation satellites range in their spatial resolution capabilities. The service providers of basemaps used within the aforementioned mapping tools use techniques to both mosaic & tile the optical imagery. As zoom levels of the web map increase, higher resolutions of the imagery can be streamed to the web map. Additionally, imagery is updated strategically by the companies that host it, and a mixture of satellite imagery is used overtime to capture the entire world from different satellite look angles. Thus, it’s difficult to capture the temporal component of common basemaps.\nFigure 4 displays a screenshot from Google Earth over Tafeghaghte, Morocco. This area is currently devastated due to the 6.8 magnitude Earthquake that struck the Marrakesh region. However, the mosaic layer of raster tiles shown here appear to be of pre-event imagery. It is zoomed in enough to a level where a date range is given for the imagery displayed. Here, the range is from the end of December 2022 to “newer”. Credit to the NY Times on their Morocco Earthquake article & to Airbus for identifying, analyzing & displaying the location.\n\n\n\nFigure 4: Pre-event Google Earth screen capture of Tafeghaghte, Morocco. Date range displayed at bottom. Source.\n\n\n\n\n\n\n\n\nNote\n\n\n\nSince the original undertaking of writing this post, Google Earth & Google Maps have both updated their web maps to reflect post Earthquake satellite imagery for this location. Figure 5 captures this.\n\n\n\n\n\nFigure 5: Post-event updated Google Earth screen capture of Tafeghaghte, Morocco. Updated sometime after 09/16/23. Source.\n\n\nCOG (Cloud Optimized GeoTIFF) formatted imagery was created to easily send images over the web. Through the use of dynamic tiling servers like TiTiler, we can create mosaic layers of satellite imagery. For responding to natural disasters, combining these technologies with government & commercial imagery provider releases like Maxar’s Open Data Program (ODP for short) can help to create tools that are useful for skilled mappers.\n\n\n\n\n\n\nmosaicJSON specification visual\n\n\nFigure 6: Source: developmentseed/mosaicjson-spec GitHub\n\nQiusheng Wu’s incredible tool Leafmap was designed for applications just like this. Leafmap can add mosaiced imagery as layers to the web map by pointing a TiTiler endpoint to a mosaicJSON file. By default, Leafmap utilizes Development Seed’s TiTiler demo endpoint at https://titiler.xyz to do this. New mosaicJSON files for collections of satellite imagery can easily be created from a STAC (SpatioTemporal Asset Catalog), such as those within the opengeos/maxar-open-data project repo, or directly from the Maxar Open Data STAC. Figure 6 shows a logical visual representation of the specification JSON structure."
  },
  {
    "objectID": "posts/geo/natural-disasters-maxar-open-data/index.html#reading-processing-stac-data",
    "href": "posts/geo/natural-disasters-maxar-open-data/index.html#reading-processing-stac-data",
    "title": "Visualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program",
    "section": "Reading & Processing STAC Data",
    "text": "Reading & Processing STAC Data\nFortunately, Qiusheng Wu has created a repo to store the Maxar Open Data STAC in opengeos/maxar-open-data, as well as an ETL to continue to processes the data automatically using GitHub Actions. Once a day, the action looks for new events in the STAC, as well as makes updates to existing event datasets. This ETL stores information on each event as well as on each ARD Visual Tile (Analysis-Ready Data). Currently, there are .tsv files that store a row describing each ARD visual COG in the STAC. Additionally, there are .geojson files that show the footprints of each image. These are broken into multiple categories. At a micro-level, there are per image GeoJSONs, broken into 2 categories: by tile, i.e. quadkey, and the union of all tiles, e.g. the image footprint. A single image, and therefore an image footprint, correlates to an acquisition ID (also referred to as a catalog ID).\n Morocco Earthquake example for acquisition ID 10300100ED11EA00:This image footprint covers the town of Amizmiz as well as the village of Tafeghaghte.\n\nBy Image Footprint\n\nhttps://github.com/opengeos/maxar-open-data/blob/master/datasets/Morocco-Earthquake-Sept-2023/10300100ED11EA00_union.geojson\n\nBy Tile\n\nhttps://github.com/opengeos/maxar-open-data/blob/master/datasets/Morocco-Earthquake-Sept-2023/10300100ED11EA00.geojson\n\n\nAt a macro-level, for each event, there are GeoJSONs stored as well, one containing individual tiles and another containing each image footprint.\nMorocco Earthquake example:\n\nBy Image Footprint\n\nhttps://github.com/opengeos/maxar-open-data/blob/master/datasets/Morocco-Earthquake-Sept-2023_union.geojson\n\nBy Tile\n\nhttps://github.com/opengeos/maxar-open-data/blob/master/datasets/Morocco-Earthquake-Sept-2023.geojson\n\n\nFigure 7 displays all of these examples in one place as 4 separate layers on a map.\nYou can find the ETL script for updating the datasets here. At the rate that Qiusheng adds new features to his tools, I’m sure there will be updates made to this repo in the near future.\n\n\nMorocco Earthquake Leafmap Folium Widget for Event & Acquisition Tile/Footprint Vector Layers\nimport leafmap\nimport leafmap.foliumap\nfrom leafmap2 import add_geojson2\nleafmap.foliumap.Map.add_geojson2 = add_geojson2\n\n# per event\nf_e_tile = \"https://raw.githubusercontent.com/opengeos/maxar-open-data/master/datasets/Morocco-Earthquake-Sept-2023.geojson\"\nf_e_img = \"https://raw.githubusercontent.com/opengeos/maxar-open-data/master/datasets/Morocco-Earthquake-Sept-2023_union.geojson\"\n# per acquisition\nf_i_tile = \"https://raw.githubusercontent.com/opengeos/maxar-open-data/master/datasets/Morocco-Earthquake-Sept-2023/10300100ED11EA00.geojson\"\nf_i_img = \"https://raw.githubusercontent.com/opengeos/maxar-open-data/master/datasets/Morocco-Earthquake-Sept-2023/10300100ED11EA00_union.geojson\"\n\nm = leafmap.foliumap.Map()\n\nm.add_geojson2(\n    f_e_tile, \"Event Layer - Tiles\", style={'color': 'blue'}, info_mode='both',\n    tooltip_fields_remove=['visual'], kwargs_tooltip={'sticky': False}\n)\nm.add_geojson2(\n    f_e_img, \"Event Layer - Image Footprints\", style={'color': 'green'}, info_mode='both',\n    tooltip_fields_remove=['visual'], kwargs_tooltip={'sticky': False}\n)\nm.add_geojson2(\n    f_i_tile, \"Acquisition Layer - Tiles\", style={'color': 'purple'}, info_mode='both',\n    tooltip_fields_remove=['visual'], kwargs_tooltip={'sticky': False}\n)\nm.add_geojson2(\n    f_i_img, \"Acquisition Layer - Image Footprint\", style={'color': 'red'}, info_mode='both',\n    tooltip_fields_remove=['visual'], kwargs_tooltip={'sticky': False}\n)\n\nwith open('./popup-fix.js') as f: js = f.read()\n# must render 1st to add script after - otherwise adds JS before Leaflet L.Map assignment\nm.get_root().render()\n# add map & geojson layer variables to script\nvar_map = m.get_name()\nvar_geojson_lgs = str([i for i in m._children.keys() if re.search('^geo_json_', i) is not None]).replace(\"'\", \"\")\nm.get_root().script.add_child(Element(js.format(m=var_map, lg_geo=var_geojson_lgs)))\nm.fit_bounds(m.get_bounds())\n\n\n\n\n\n\nFigure 7: Event & Acquisition Tile & Footprint Imagery Vector Layers of the Morocco Earthquake. Sources: opengeos/maxar-open-data Github & Maxar Open Data Program STAC"
  },
  {
    "objectID": "posts/geo/natural-disasters-maxar-open-data/index.html#before-after---capturing-pre-post-events",
    "href": "posts/geo/natural-disasters-maxar-open-data/index.html#before-after---capturing-pre-post-events",
    "title": "Visualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program",
    "section": "Before & After - Capturing Pre & Post Events",
    "text": "Before & After - Capturing Pre & Post Events\nNatural disasters evolve rapidly, yet vary in nature. As their effects unfold, they can linger & ripple. Thus, it’s challenging to define clear cut before & after timelines. In Maxar’s white paper describing their open data disaster response protocol, they describe that their data will include both pre & post event imagery. In attempt to make distinctions here that assist first responders, it may be helpful to first capture the event in a way that defines pre & post events, and then continue to evolve as both the disaster and response to the disaster unfolds. On the Open Data Program website, each event date is posted, and each event is indeed broken into pre & post event datasets. However, within the STAC, there is no metadata field defining the date of the event, and neither is there a pre & post event metadata field, just acquisition dates of the imagery.\nComputer vision models that use satellite imagery to perform classification in attempt to predict the amount of damage of detected objects and/or damage over an area can only be so accurate & precise. Yet, these are promising techniques and are continuing to evolve as viable response methods.\nAs a first order analysis, we can utilize historical information on the event to define pre & post event imagery. From there, we can attempt to make web maps more interactive for responders. These features can and are being experimented with. Additionally, as more providers respond to events by releasing their imagery through open access programs, the techniques can evolve in attempt to provide a collection of the best imagery to meet responders’ unique, niche needs.\nWe’ll first download and store the data for all events. Then, we’ll can use our Morocco event as an example moving forward.\nI think that all of the anti-patterns associated with Pandas make it kind of a suboptimal dataframe/analysis library.However, I use it here due to its integration with Geopandas & Leafmap. For the Python geospatial ecosystem, I am really looking forward to Geopolars taking off in 2024.\n\n\nEvents in Maxar’s Open Data Program\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\n\np_datasets = 'https://raw.githubusercontent.com/opengeos/maxar-open-data/master/datasets.csv'\nd_maxar = pd.read_csv(p_datasets)\np_top = 'https://raw.githubusercontent.com/opengeos/maxar-open-data/master/datasets/'\np_bottom = '.geojson'\n\nd_maxar['dataset']\n\n\n0            BayofBengal-Cyclone-Mocha-May-23\n1         Emilia-Romagna-Italy-flooding-may23\n2                   Gambia-flooding-8-11-2022\n3                   Hurricane-Fiona-9-19-2022\n4                     Hurricane-Ian-9-26-2022\n5              Hurricane-Idalia-Florida-Aug23\n6                      Indonesia-Earthquake22\n7          Kahramanmaras-turkey-earthquake-23\n8                  Kalehe-DRC-Flooding-5-8-23\n9                      Libya-Floods-Sept-2023\n10                    Marshall-Fire-21-Update\n11                   Maui-Hawaii-fires-Aug-23\n12    McDougallCreekWildfire-BC-Canada-Aug-23\n13               Morocco-Earthquake-Sept-2023\n14                          NWT-Canada-Aug-23\n15                     New-Zealand-Flooding22\n16                     New-Zealand-Flooding23\n17                   Sudan-flooding-8-22-2022\n18                   afghanistan-earthquake22\n19                           cyclone-emnati22\n20                          ghana-explosion22\n21                kentucky-flooding-7-29-2022\n22                        pakistan-flooding22\n23             shovi-georgia-landslide-8Aug23\n24                     southafrica-flooding22\n25                            tonga-volcano21\n26                        volcano-indonesia21\n27                     yellowstone-flooding22\nName: dataset, dtype: object\n\n\nWe can store these datasets into a single dataframe. And we can also compare this collection to the current STAC deployed at https://maxar-opendata.s3.amazonaws.com/events/catalog.json.\n\n\nTile Dataframe of Maxar ODP\n%%time\n\nl_gdf = [gpd.read_file(p_top+d+p_bottom).assign(event = d) for d in d_maxar['dataset'].to_list()]\n\nd_tiles = (pd.concat(l_gdf, ignore_index=True))\n# changes column order - puts event & geometry first\nd_tiles = d_tiles[d_tiles.columns[-2::][::-1].append(d_tiles.columns[:-2])]\n\n\nCPU times: user 5.37 s, sys: 325 ms, total: 5.69 s\nWall time: 15.5 s\n\n\n\n\nMaxar ODP Event STAC Query\n%%time \n\nfrom pystac import Catalog\n\nhref = \"https://maxar-opendata.s3.amazonaws.com/events/catalog.json\"\nroot_catalog = Catalog.from_file(href)\ncollection_events = list(root_catalog.get_collections())\n\n\nCPU times: user 935 ms, sys: 98.7 ms, total: 1.03 s\nWall time: 11.5 s\n\n\n\n\nEvents in both ODP STAC & opengeos/maxar-open-data\nid_events = [c.id for c in collection_events]\nid_events\n\n\n['BayofBengal-Cyclone-Mocha-May-23',\n 'Emilia-Romagna-Italy-flooding-may23',\n 'Gambia-flooding-8-11-2022',\n 'Hurricane-Fiona-9-19-2022',\n 'Hurricane-Ian-9-26-2022',\n 'Hurricane-Idalia-Florida-Aug23',\n 'Indonesia-Earthquake22',\n 'Kahramanmaras-turkey-earthquake-23',\n 'Kalehe-DRC-Flooding-5-8-23',\n 'Libya-Floods-Sept-2023',\n 'Marshall-Fire-21-Update',\n 'Maui-Hawaii-fires-Aug-23',\n 'McDougallCreekWildfire-BC-Canada-Aug-23',\n 'Morocco-Earthquake-Sept-2023',\n 'NWT-Canada-Aug-23',\n 'New-Zealand-Flooding23',\n 'Sudan-flooding-8-22-2022',\n 'afghanistan-earthquake22',\n 'cyclone-emnati22',\n 'ghana-explosion22',\n 'kentucky-flooding-7-29-2022',\n 'pakistan-flooding22',\n 'shovi-georgia-landslide-8Aug23',\n 'southafrica-flooding22',\n 'tonga-volcano21',\n 'volcano-indonesia21',\n 'yellowstone-flooding22']\n\n\nHere, we assign every event time a start date and site our sources. If there is leeway to the exact event time, we assign the day that it has been reported and offset to the beginning of the day for the UTC timezone. Then, we add the event data to our tile dataframe & easily save it to geojson for pre/post event analysis later.\n\n\nEvent Data\ndict_event = {\n    'BayofBengal-Cyclone-Mocha-May-23': ['2023-05-13 18:30:00', 'https://www.maxar.com/open-data/bay-of-bengal-cyclone-mocha-2023'],\n    'Emilia-Romagna-Italy-flooding-may23': ['2023-05-01 22:00:00', 'https://en.wikipedia.org/wiki/2023_Emilia-Romagna_floods'],\n    'Gambia-flooding-8-11-2022': ['2022-08-11 00:00:00', 'https://www.maxar.com/open-data/the-gambia-flooding'],\n    'Hurricane-Fiona-9-19-2022': ['2022-09-18 04:00:00', 'https://www.maxar.com/open-data/hurricane-fiona'],\n    'Hurricane-Ian-9-26-2022': ['2022-09-27 08:30:00', 'https://www.nhc.noaa.gov/data/tcr/AL092022_Ian.pdf'],\n    'Hurricane-Idalia-Florida-Aug23': ['2023-08-30 05:00:00', 'https://www.maxar.com/open-data/hurricane-idalia-florida'],\n    'Indonesia-Earthquake22': ['2022-11-21 06:21:07', 'https://earthquake.usgs.gov/earthquakes/eventpage/us7000ir9t/executive'],\n    'Kahramanmaras-turkey-earthquake-23': ['2023-02-06 01:17:34', 'https://earthquake.usgs.gov/earthquakes/eventpage/us6000jllz/executive'],\n    'Kalehe-DRC-Flooding-5-8-23': ['2023-05-07 22:00:00', 'https://www.maxar.com/open-data/kalehe-drc-flooding-2023'],\n    'Libya-Floods-Sept-2023': ['2023-09-10 23:00:00', 'https://www.cnn.com/2023/09/14/middleeast/lethal-factors-leading-to-libya-floods-intl/index.html'],\n    'Marshall-Fire-21-Update': ['2021-12-30 06:00:00', 'https://www.maxar.com/open-data/marshall-fire21'],\n    'Maui-Hawaii-fires-Aug-23': ['2023-08-09 01:00:00', 'https://firms.modaps.eosdis.nasa.gov/usfs/'],\n    'McDougallCreekWildfire-BC-Canada-Aug-23': ['2023-08-15 12:59:00', 'https://en.wikipedia.org/wiki/McDougall_Creek_Fire'],\n    'Morocco-Earthquake-Sept-2023': ['2023-09-08 22:11:01', 'https://earthquake.usgs.gov/earthquakes/eventpage/us7000kufc/executive'],\n    'NWT-Canada-Aug-23': ['2023-08-16 07:00:00', 'https://www.maxar.com/open-data/nwt-canada-fires'],\n    'New-Zealand-Flooding23': ['2023-01-26 12:00:00', 'https://www.maxar.com/open-data/new-zealand-flooding23'],\n    'Sudan-flooding-8-22-2022': ['2022-08-21 22:00:00', 'https://www.maxar.com/open-data/sudan-flooding-22'],\n    'afghanistan-earthquake22': ['2022-06-21 20:54:34', 'https://earthquake.usgs.gov/earthquakes/eventpage/us7000hj3u/executive'],\n    'cyclone-emnati22': ['2022-02-21 21:00:00', 'https://www.maxar.com/open-data/cyclone-emnati'],\n    'ghana-explosion22': ['2022-01-20 15:00:00', 'https://abcnews.go.com/International/massive-explosion-rocks-town-ghana/story?id=82375601'],\n    'kentucky-flooding-7-29-2022': ['2022-07-29 05:00:00', 'https://www.maxar.com/open-data/kentucky-flooding22'],\n    'pakistan-flooding22': ['2022-07-25 17:00:00', 'https://www.maxar.com/open-data/pakistan-flooding22'],\n    'shovi-georgia-landslide-8Aug23': ['2022-08-03 11:00:00', 'https://civil.ge/archives/554327'],\n    'southafrica-flooding22': ['2022-04-12 22:00:00', 'https://www.maxar.com/open-data/southafrica-flooding22'],\n    'tonga-volcano21': ['2022-01-13 15:20:00', 'https://wikipedia.org/wiki/2022_Hunga_Tonga%E2%80%93Hunga_Ha%CA%BBapai_eruption_and_tsunami'],\n    'volcano-indonesia21': ['2021-12-04 07:50:00', 'https://reliefweb.int/report/indonesia/indonesia-mount-semeru-eruption-operation-final-report-dref-operation-ndeg-mdrid023'],\n    'yellowstone-flooding22': ['2022-06-15 06:00:00', 'https://www.maxar.com/open-data/yellowstone-flooding22']\n}\n\nd_event = pd.DataFrame.from_dict(dict_event, orient='index', columns=['t_event', 'source'])\nd_event = (d_event\n .reset_index(names='event')\n .assign(t_event = pd.to_datetime(d_event.t_event, utc=True).to_list())\n .sort_values('t_event', ascending=False)\n .reset_index(drop=True)\n)\n\n\n\n\nTile Dataframe of Maxar ODP w/ Event Data\n# right join removes old datasets stored in opengeos/maxar-open-data\nd_tiles = pd.merge(left=d_tiles, right=d_event, how='right', left_on='event', right_on='event')\nd_tiles = d_tiles.assign(pre_post = np.where(d_tiles.datetime &lt; d_tiles.t_event, 'pre', 'post'))\nd_tiles.insert(1, 'pre_post', d_tiles.pop('pre_post'))\n# sort by latest event date \nd_tiles = (d_tiles\n .assign(latest = d_tiles.groupby('event')['t_event'].transform('max'))\n .sort_values(['latest','datetime'], ascending=False)\n .drop('latest', axis=1)\n .reset_index(drop=True)\n)\nd_tiles.to_file('maxar_odp_tiles.geojson')"
  },
  {
    "objectID": "posts/geo/natural-disasters-maxar-open-data/index.html#building-mosaics",
    "href": "posts/geo/natural-disasters-maxar-open-data/index.html#building-mosaics",
    "title": "Visualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program",
    "section": "Building Mosaics",
    "text": "Building Mosaics\nHere, I build the mosaicJSON specification files. After creation, I store them on my GitHub at prncevince/mosaicjson-examples. To allow Development Seed’s TiTiler demo endpoint to run a GET request on the mosaicJSON, they must be accessible from the web. Later, we can use https://raw.githubusercontent.com as the base domain for the TiTiler endpoint to read the mosaicJSON files.\n\n\n\n\n\n\nImportant\n\n\n\nThis may not be the most efficient way to generate the mosaicJSON. The below snippet took ~6.5 hours to run on a MBP M1 Pro with 10 CPU cores & 32 GB of RAM. Also, due to previous logic, it failed the first time around due to attempting to create mosaicJSON files using 0 images (e.g. for events that have just pre or just post event imagery, but not both). However, strategically experimenting with parallelism can help improve the speed of mosaicJSON creation as pointed out in this discussion.\n\n\n\n\nPre & Post Event MosaicJSON Creation\n%%time\nimport os\nimport time\nfrom cogeo_mosaic.mosaic import MosaicJSON\nfrom cogeo_mosaic.backends import MosaicBackend\n\nfor e in np.unique(d_tiles.event)[10:]:\n    start = time.time()\n    d = d_tiles[d_tiles.event == e].reset_index(drop=True)\n    # write output\n    os.makedirs('data/'+e, exist_ok=True)\n    for i in ['pre', 'post']:\n        images = d[d.pre_post == i].reset_index(drop=True).visual.tolist()\n        if len(images) &gt; 0:\n            mosaic = MosaicJSON.from_urls(images)\n            with MosaicBackend('data/'+e+'/mosaic-tiles-'+i+'.json', mosaic_def=mosaic) as f:\n                f.write(overwrite=True)\n    end = time.time()\n    print(e+' Pre/Post MosaicJSON Time: '+str(round(end-start, 2))+'s')\n\n\nMarshall-Fire-21-Update Pre/Post MosaicJSON Time: 10.01s\nMaui-Hawaii-fires-Aug-23 Pre/Post MosaicJSON Time: 83.72s\nMcDougallCreekWildfire-BC-Canada-Aug-23 Pre/Post MosaicJSON Time: 36.84s\nMorocco-Earthquake-Sept-2023 Pre/Post MosaicJSON Time: 8794.56s\nNWT-Canada-Aug-23 Pre/Post MosaicJSON Time: 72.81s\nNew-Zealand-Flooding23 Pre/Post MosaicJSON Time: 47.13s\nSudan-flooding-8-22-2022 Pre/Post MosaicJSON Time: 84.21s\nafghanistan-earthquake22 Pre/Post MosaicJSON Time: 381.16s\ncyclone-emnati22 Pre/Post MosaicJSON Time: 679.6s\nghana-explosion22 Pre/Post MosaicJSON Time: 189.09s\nkentucky-flooding-7-29-2022 Pre/Post MosaicJSON Time: 232.91s\npakistan-flooding22 Pre/Post MosaicJSON Time: 2669.68s\nshovi-georgia-landslide-8Aug23 Pre/Post MosaicJSON Time: 23.75s\nsouthafrica-flooding22 Pre/Post MosaicJSON Time: 813.63s\ntonga-volcano21 Pre/Post MosaicJSON Time: 291.19s\nvolcano-indonesia21 Pre/Post MosaicJSON Time: 241.28s\nyellowstone-flooding22 Pre/Post MosaicJSON Time: 281.45s\nCPU times: user 9min 58s, sys: 6min 55s, total: 16min 53s\nWall time: 4h 8min 53s\n\n\nCURL error: Could not resolve host: maxar-opendata.s3.amazonaws.com\nHTTP response code: 500\nHTTP response code: 404\nHTTP response code: 404"
  },
  {
    "objectID": "posts/geo/natural-disasters-maxar-open-data/index.html#visualizing-pre-post-events",
    "href": "posts/geo/natural-disasters-maxar-open-data/index.html#visualizing-pre-post-events",
    "title": "Visualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program",
    "section": "Visualizing Pre & Post Events",
    "text": "Visualizing Pre & Post Events\nFigure 8 shows pre & post event layers for all of the image footprints in the ODP. The red layer is pre event footprints & the blue layer is post event. Here, I strategically aggregate the metadata of the tiles by the acquisition/catalog ID field to create a richer per image dataset. We’re working our way backwards here from tile to image footprint because each item in the STAC is a tile with metadata stored on it. Similar to our tile dataframe, we can store the result as a GeoJSON for later usage.\nMoving along with our Morocco example, Figure 9 shows the power of dynamic tiling to investigate the pre/post event imagery. Here, I create a dual split map to help make comparisons of the pre/post event imagery. I also dive deeper into the usage of the split map with a small demo screen recording.\n\n\nImage Footprint Aggregation\n# We need to group by `catalog_id` | then take the union to get image footprint\n# these columns are unique to the tile - thus - they should be handled differently than simply taking the 1st value\n# visual - change to collection url\n# tile:data_area - get this from the footprint union area due to tile overlap\n# tile:clouds_area - sum - decently close\n# tile:clouds_percent   - mean - decently close\n# view:* - mean\n# gsd - mean\ncols_tile = [\n    'visual', 'tile:data_area', 'tile:clouds_area', 'tile:clouds_percent',\n    'view:off_nadir', 'view:azimuth', 'view:incidence_angle', 'view:sun_azimuth', 'view:sun_elevation',\n    'gsd', 'proj:bbox', 'quadkey', 'utm_zone', 'grid:code'\n]\n# create bounding box from image footprint instead of these\ncols_drop = ['proj:bbox', 'quadkey', 'grid:code']\n\ncols_tile_unique = ['utm_zone', 'tile:clouds_area']\ncols_tile_mean = ['gsd', 'tile:clouds_percent', 'view:off_nadir', 'view:azimuth', 'view:incidence_angle', 'view:sun_azimuth', 'view:sun_elevation']\ncols_tile_footprint = ['event', 'pre_post', 'catalog_id']\n\nd_agg = (d_tiles[cols_tile_footprint+cols_tile_unique]\n .groupby(cols_tile_footprint)\n .agg({\n     'utm_zone': lambda x: np.unique(x).tolist(),\n     'tile:clouds_area': lambda x: round(sum(x), 2),\n })\n)\nd_agg_mean = (d_tiles[cols_tile_footprint+cols_tile_mean]\n .groupby(cols_tile_footprint)\n .agg(lambda x: round(np.mean(x), 2))\n)\n\nd_foot = (d_tiles[d_tiles.columns.difference(cols_drop+cols_tile_unique+cols_tile_mean).to_list()]\n .dissolve(cols_tile_footprint, aggfunc = 'first')\n # same index - can left join aggregates on index by default\n .join(d_agg).join(d_agg_mean)\n # add index back to dataframe\n .reset_index()\n)\n# split because `d` carries from original when chaining\nd_foot = (d_foot\n .assign(\n     # uses equal area projection - converts km^2 original units \n     footprint_data_area = lambda d: round(d.geometry.to_crs(epsg=6933).area/1e6, 2),\n     bbox = d_foot.geometry.bounds.applymap(lambda x: round(np.mean(x), 2)).values.tolist()\n )\n .sort_values(['t_event', 'datetime'], ascending=False)\n .reset_index(drop=True)\n .rename(columns={\n     'tile:clouds_area': 'footprint:clouds_area', 'tile:clouds_percent': 'footprint:clouds_percent',\n     'footprint_data_area': 'footprint:data_area'\n })\n)\n\n# `to_file` does not suport list columns - thus `to_json` approach\ndef write_geojson(d, path):\n    with open(path, 'w') as f:\n        # type Timestamp objects with datetime64 dtype must be converted to string\n        for col in d.columns:\n            if d[col].dtype in [\"datetime64[ns]\", \"datetime64[ns, UTC]\"]:\n                d[col] = d[col].astype(str)\n        f.write(d_foot.to_json())\nwrite_geojson(d_foot, 'maxar_odp_footprint.geojson')\n\n\n\n\nLeafmap Folium Widget for Pre & Post Event Image Footprints\nimport re\nfrom folium import Element\nfrom leafmap2 import add_gdf2\nleafmap.foliumap.Map.add_gdf2 = add_gdf2\n\ncols_drop = ['source', 'proj:epsg', 't_event']\nd = d_foot.copy(deep=True)\nd.drop(cols_drop, axis=1, inplace=True)\n\ndef style_footprints(color, fillOpacity, weight):\n    style = {\n        'color': color, 'fillOpacity': fillOpacity, 'weight': weight\n    }\n    return style\n\n# setting `zoom_start=2` has no effect here\nm = leafmap.foliumap.Map(zoom_start=2, world_copy_jump=True) \nm.add_gdf2(\n    d[d.pre_post == 'pre'], \"Pre Event - Image Footprints\",\n    style=style_footprints('blue', 0, 1.5), info_mode='both',\n    tooltip_fields_remove=['visual'], kwargs_tooltip={'sticky': False}\n)\nm.add_gdf2(\n    d[d.pre_post == 'post'], \"Post Event - Image Footprints\",\n    style=style_footprints('red', 0, 1.5), info_mode='both',\n    tooltip_fields_remove=['visual'], kwargs_tooltip={'sticky': False}\n)\nwith open('./popup-fix.js') as f: js = f.read()\n# must render 1st to add script after - otherwise adds JS before Leaflet L.Map assignment\nm.get_root().render()\n# add map & geojson layer variables to script\nvar_map = m.get_name()\nvar_geojson_lgs = str([i for i in m._children.keys() if re.search('^geo_json_', i) is not None]).replace(\"'\", \"\")\nm.get_root().script.add_child(Element(js.format(m=var_map, lg_geo=var_geojson_lgs)))\nm.zoom_to_bounds([-105.0, -66.51326044311186, 75, 66.51326044311186])\n\n\n\n\n\n\nFigure 8: Pre & Post Event Image Footprints of Maxar ODP Events. Sources: opengeos/maxar-open-data Github & Maxar Open Data Program STAC\n\n\n\n\nMorocco Earthquake Pre/Post Event Dynamic Tiling\nFigure 9 is a side-by-side comparison map (aka “split map”) of the Morocco Earthquake ODP imagery. In this example, I assign single tile layers to both the left & right side of the split map:\n\non the left our dynamically generated tiles of post-event (earthquake) Maxar ODP imagery\non the right Google Satellite xyz tile imagery\n\nThe pre-event imagery is added as well. By default, I’ve toggled on the post-event footprints & toggled off the pre-event footprints. To view the dynamically tiled pre/post event imagery, you need to zoom in and allow Leaflet/TiTiler to do their thing. At the cost of speed, dynamic tiling takes longer for the tiles to be viewed/loaded in the web map because they are generated “on-the-fly”. The TiTiler Dynamic Tiling User Guide explains static vs. dynamic tiling.\nOne thing that I find helpful about the Leafmap widget is that you can search for a longitude/latitude point on the map using the search widget  (magnifying glass). Thus, continuing with Tafeghaghte as an example, in Figure 1 as well as my video demo (Figure 10) I show how to use this feature to quickly compare before & after images on the map.\nWe could also compare the pre-event imagery provided by the ODP to the post-event imagery. Table 1 shows us that there’s way more pre event than post event imagery available. Additionally, we see that the pre-event Morocco Earthquake imagery comprises a significant portion of the ODP catalog, 36% of the images! I also provide Table 2 to show all of the image counts for pre/post events within ODP.\nUnfortunately, the side-by-side split map Leaflet.js plugin has some buggy logic. So right now, it’s a bit difficult to add any amount of Leaflet layers (an array) to the left & right sides of the map & toggle them on/off as necessary. However, with a more dynamic server sided web app, we can begin to visualize and compare all of this imagery for any event.\n\n\nCode\n100*round(d['count'][1]/d_foot.shape[0], 3)\n\n\n36.0\n\n\n\n\nCode\nd = pd.DataFrame(\n#  (d_tiles\n  (d_foot\n  .groupby(['event', 'pre_post'])\n  ).size(),\n  columns=['count']\n).reset_index()\nd = (d[d.event == 'Morocco-Earthquake-Sept-2023']\n .reset_index(drop=True)\n)\nd.style.hide(axis=\"index\")\n\n\n\n\n\n\nTable 1: Maxar’s ODP Morocco Earthquake Event Pre/Post Image Counts\n\n\nevent\npre_post\ncount\n\n\n\n\nMorocco-Earthquake-Sept-2023\npost\n12\n\n\nMorocco-Earthquake-Sept-2023\npre\n226\n\n\n\n\n\n\n\n\nSplit Map Leamap Folium Widget of Morocco Earthquake\n# 'p' for path | 'm' for mosaic | 'f' for footprint\nevent = 'Morocco-Earthquake-Sept-2023'\npm_top = 'https://raw.githubusercontent.com/prncevince/mosaicjson-examples/main/maxar-open-data/'\npm_end_pre = '/mosaic-tiles-pre.json'\npm_end_post = '/mosaic-tiles-post.json'\n\ncols_drop = ['source', 'proj:epsg', 't_event']\nd = d_foot[d_foot.event == event]\nd.drop(cols_drop, axis=1, inplace=True)\n\nm = leafmap.foliumap.Map()\ndef style_footprints(color, fillOpacity, weight):\n    style = {\n        'color': color, 'fillOpacity': fillOpacity, 'weight': weight\n    }\n    return style\nbasemap = {  \n  \"url\": \"https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}\",\n  \"attribution\": \"Google\",\n  \"name\": \"Google Satellite\",\n}\nm.add_tile_layer(**basemap, shown=True)\nm.add_stac_layer(pm_top+event+pm_end_pre, name=\"Pre-Event - Mosaic\", attribution=\"Maxar Technologies\", shown=True)\nm.add_stac_layer(pm_top+event+pm_end_post, name=\"Post-Event - Mosaic\", attribution=\"Maxar Technologies\")\nm.add_gdf2(\n    d[d.pre_post == 'pre'], \"Pre Event - Image Footprints\",\n    style=style_footprints('blue', 0, 1.5), info_mode='both', show=False,\n    tooltip_fields_remove=['visual'], kwargs_tooltip={'sticky': False}\n)\nm.add_gdf2(\n    d[d.pre_post == 'post'], \"Post Event - Image Footprints\",\n    style=style_footprints('red', 0, 1.5), info_mode='both',\n    tooltip_fields_remove=['visual'], kwargs_tooltip={'sticky': False}\n)\nwith open('./popup-fix.js') as f: js_po = f.read()\nwith open('./side-by-side.js') as f: js_sbs = f.read()\nwith open('./split-map-layout.css') as f: css_sbs_l = f.read()\nwith open('./split-map-range.css') as f: css_sbs_r = f.read()\n#with open('./split-map.js') as f: js_sm = f.read()\n# must render 1st to add script after - otherwise adds JS before Leaflet L.Map assignment\nm.get_root().render()\n# add map & geojson layer variables to script\nvar_map = m.get_name()\nvar_geojson_lgs = str([i for i in m._children.keys() if re.search('^geo_json_', i) is not None]).replace(\"'\", \"\")\ntile_layers = [i for i in m._children.keys() if re.search('^tile_layer_', i) is not None]\n# need to know the order of your tiles for adding as split map\n# an area of multiple layers can be passed to left & right arguments of L.control.sideBySide\n# however, it's pretty buggy when passing more than one layer\ni_all = [0,1,2] # a basemap, pre, & post event\ni_left = [2]\ni_right = [0]\nl_lleft = str([j for i, j in enumerate(tile_layers) if i in i_left]).replace(\"'\", \"\")\nl_lright = str([j for i, j in enumerate(tile_layers) if i in i_right]).replace(\"'\", \"\")\nm.get_root().header.add_child(Element('&lt;style&gt;'+css_sbs_l+'&lt;/style&gt;'))\nm.get_root().header.add_child(Element('&lt;style&gt;'+css_sbs_r+'&lt;/style&gt;'))\nm.get_root().script.add_child(Element(js_po.format(m=var_map, lg_geo=var_geojson_lgs)))\nm.get_root().script.add_child(Element(js_sbs))\nm.get_root().script.add_child(Element('L.control.sideBySide({l_lleft}, {l_lright}).addTo({m});'.format(l_lleft=l_lleft, l_lright=l_lright, m=var_map)))\n\n\n\n\n\n\nFigure 9: Split map of Pre/Post Event Imagery after the Morocco Earthquake. Sources: opengeos/maxar-open-data Github & Maxar Open Data Program STAC\n\n\n\n\n\nCode\n(pd.DataFrame(\n  (d_foot\n   .assign(t_event = pd.to_datetime(d_foot.t_event).dt.tz_localize(None))\n   .groupby(['t_event', 'event', 'pre_post'])\n  ).size(),\n  columns=['count']\n).sort_values(['t_event'], ascending=False)\n).reset_index().style.hide(axis=\"index\")\n\n\n\n\n\n\nTable 2: Maxar’s ODP Event Pre/Post Image Counts\n\n\nt_event\nevent\npre_post\ncount\n\n\n\n\n2023-09-10 23:00:00\nLibya-Floods-Sept-2023\npre\n4\n\n\n2023-09-10 23:00:00\nLibya-Floods-Sept-2023\npost\n3\n\n\n2023-09-08 22:11:01\nMorocco-Earthquake-Sept-2023\npre\n226\n\n\n2023-09-08 22:11:01\nMorocco-Earthquake-Sept-2023\npost\n12\n\n\n2023-08-30 05:00:00\nHurricane-Idalia-Florida-Aug23\npre\n13\n\n\n2023-08-30 05:00:00\nHurricane-Idalia-Florida-Aug23\npost\n1\n\n\n2023-08-16 07:00:00\nNWT-Canada-Aug-23\npre\n2\n\n\n2023-08-16 07:00:00\nNWT-Canada-Aug-23\npost\n2\n\n\n2023-08-15 12:59:00\nMcDougallCreekWildfire-BC-Canada-Aug-23\npre\n2\n\n\n2023-08-09 01:00:00\nMaui-Hawaii-fires-Aug-23\npost\n5\n\n\n2023-05-13 18:30:00\nBayofBengal-Cyclone-Mocha-May-23\npre\n3\n\n\n2023-05-13 18:30:00\nBayofBengal-Cyclone-Mocha-May-23\npost\n2\n\n\n2023-05-07 22:00:00\nKalehe-DRC-Flooding-5-8-23\npre\n1\n\n\n2023-05-07 22:00:00\nKalehe-DRC-Flooding-5-8-23\npost\n1\n\n\n2023-05-01 22:00:00\nEmilia-Romagna-Italy-flooding-may23\npre\n10\n\n\n2023-05-01 22:00:00\nEmilia-Romagna-Italy-flooding-may23\npost\n1\n\n\n2023-02-06 01:17:34\nKahramanmaras-turkey-earthquake-23\npre\n26\n\n\n2023-02-06 01:17:34\nKahramanmaras-turkey-earthquake-23\npost\n50\n\n\n2023-01-26 12:00:00\nNew-Zealand-Flooding23\npre\n2\n\n\n2023-01-26 12:00:00\nNew-Zealand-Flooding23\npost\n1\n\n\n2022-11-21 06:21:07\nIndonesia-Earthquake22\npre\n5\n\n\n2022-11-21 06:21:07\nIndonesia-Earthquake22\npost\n3\n\n\n2022-09-27 08:30:00\nHurricane-Ian-9-26-2022\npost\n27\n\n\n2022-09-27 08:30:00\nHurricane-Ian-9-26-2022\npre\n62\n\n\n2022-09-18 04:00:00\nHurricane-Fiona-9-19-2022\npre\n6\n\n\n2022-09-18 04:00:00\nHurricane-Fiona-9-19-2022\npost\n10\n\n\n2022-08-21 22:00:00\nSudan-flooding-8-22-2022\npre\n3\n\n\n2022-08-21 22:00:00\nSudan-flooding-8-22-2022\npost\n4\n\n\n2022-08-11 00:00:00\nGambia-flooding-8-11-2022\npre\n3\n\n\n2022-08-11 00:00:00\nGambia-flooding-8-11-2022\npost\n3\n\n\n2022-08-03 11:00:00\nshovi-georgia-landslide-8Aug23\npre\n2\n\n\n2022-08-03 11:00:00\nshovi-georgia-landslide-8Aug23\npost\n1\n\n\n2022-07-29 05:00:00\nkentucky-flooding-7-29-2022\npre\n6\n\n\n2022-07-29 05:00:00\nkentucky-flooding-7-29-2022\npost\n4\n\n\n2022-07-25 17:00:00\npakistan-flooding22\npost\n44\n\n\n2022-07-25 17:00:00\npakistan-flooding22\npre\n19\n\n\n2022-06-21 20:54:34\nafghanistan-earthquake22\npost\n7\n\n\n2022-06-21 20:54:34\nafghanistan-earthquake22\npre\n7\n\n\n2022-06-15 06:00:00\nyellowstone-flooding22\npost\n5\n\n\n2022-04-12 22:00:00\nsouthafrica-flooding22\npre\n2\n\n\n2022-04-12 22:00:00\nsouthafrica-flooding22\npost\n11\n\n\n2022-02-21 21:00:00\ncyclone-emnati22\npre\n5\n\n\n2022-02-21 21:00:00\ncyclone-emnati22\npost\n1\n\n\n2022-01-20 15:00:00\nghana-explosion22\npre\n2\n\n\n2022-01-20 15:00:00\nghana-explosion22\npost\n1\n\n\n2022-01-13 15:20:00\ntonga-volcano21\npre\n1\n\n\n2022-01-13 15:20:00\ntonga-volcano21\npost\n9\n\n\n2021-12-30 06:00:00\nMarshall-Fire-21-Update\npost\n1\n\n\n2021-12-04 07:50:00\nvolcano-indonesia21\npre\n3\n\n\n2021-12-04 07:50:00\nvolcano-indonesia21\npost\n4"
  },
  {
    "objectID": "posts/geo/natural-disasters-maxar-open-data/index.html#wrap-up",
    "href": "posts/geo/natural-disasters-maxar-open-data/index.html#wrap-up",
    "title": "Visualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program",
    "section": "Wrap-up",
    "text": "Wrap-up\nAlthough it may be difficult to claim that there is an overall increase in the number of natural disasters over the course of recent history, it is clear that the amount of recorded data that we as a society have on natural disasters is increasing. As this rate across our world increases and as the level of damage and destruction becomes more severe on Earth, there’s an ever growing need to analyze satellite sensor data to help respond to these events. Hopefully, more satellite imagery providers can follow the trend of continuing to release critical imagery to those who need it most in critical times of need.\nIf you have any thoughts or questions, feel free to let me know what you think in the comments below. You’ll need to sign in to your GitHub account to do so. Like my work? Feel free to reach out.\nWe only have one rock, and it’s a beautiful one. Thanks for reading! ✌️🌍\n\n\n\nFigure 10: 2023 Morocco Earthquake - Leaflet Split Map Example"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Big & tiny spatial thoughts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Updated - Oldest\n        \n         \n          Updated - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\nVisualizing Natural Disasters through Dynamic Tiling and Maxar’s Open Data Program\n\n\n13 min\n\n\nA deep dive into visualizing satellite imagery from Maxar’s ODP on-the-fly using STAC, dynamic tiling, and Leaflet.\n\n\n\nOctober 2, 2023\n\n\n\n\n\nOctober 3, 2023\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "Vincent Clemson",
    "section": "",
    "text": "👋 I’m Vince. In 2017, I received my Bachelor of Science in mathematics & a minor in statistics from Penn State. Afterward, I worked 5+ years for what is now Peraton working a few Geospatial Intelligence data science missions on the NGA’s enterprise systems engineering contract. Currently, I’m an AI Engineer at Booz Allen.\nI’m always searching for my next big (or tiny) data science adventure.\nI enjoy spatial analytics. I hope that I can help shed some light on spatial topics to those who are also interested with this site. It’s built with Quarto.\nWhen I’m not head down in geeky stuff, I enjoy salsa dancing, sports (go birds 🦅), and jumping out of aircraft (did it once - was fun & a bit terrifying).\nIf you’re interesting in learning more about my career, here’s a web version of my résumé.\nAlso, feel free to contact me at vincent.clemson{@}gmail.com.\nThanks for stopping by. ✌️"
  },
  {
    "objectID": "SETUP.html",
    "href": "SETUP.html",
    "title": "Quarto Site Environment Setup",
    "section": "",
    "text": "Here’s all the setup.\n\nSetup quarto-shims.\nThen, run below to install & setup quarto. wget is required in your shell environment, can be installed on Mac via homebrew.\n./utils/download-quarto.sh\n\nSetup r-shims.\nCreate RStudio project within RStudio.\n\nrstudioapi::initializeProject()\n\nInitialize the renv environment. Important packages can be discovered in utils/deps.R.\n\nrenv::init()\n\n\nExplode on paper."
  },
  {
    "objectID": "SETUP.html#quarto",
    "href": "SETUP.html#quarto",
    "title": "Quarto Site Environment Setup",
    "section": "",
    "text": "Setup quarto-shims.\nThen, run below to install & setup quarto. wget is required in your shell environment, can be installed on Mac via homebrew.\n./utils/download-quarto.sh"
  },
  {
    "objectID": "SETUP.html#r",
    "href": "SETUP.html#r",
    "title": "Quarto Site Environment Setup",
    "section": "",
    "text": "Setup r-shims.\nCreate RStudio project within RStudio.\n\nrstudioapi::initializeProject()\n\nInitialize the renv environment. Important packages can be discovered in utils/deps.R.\n\nrenv::init()"
  },
  {
    "objectID": "SETUP.html#start",
    "href": "SETUP.html#start",
    "title": "Quarto Site Environment Setup",
    "section": "",
    "text": "Explode on paper."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "👋 Welcome to my site",
    "section": "",
    "text": "👋 Welcome to my site\n\nYou can learn more about me here.\nYou can find my posts on spatial analytics here.\nMy YouTube\n\n\n\nThanks for stopping by ✌"
  }
]